1. SpringAOP

1).加入jar 包依赖

		<!-- IOC 容器要添加的包 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>4.0.0.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>4.0.0.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>4.0.0.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>4.0.0.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<version>1.1.3</version>
		</dependency>
		
		<!-- 加入 AOP aspectj 的相关包 -->
		<!-- https://mvnrepository.com/artifact/aopalliance/aopalliance -->
		<dependency>
		    <groupId>aopalliance</groupId>
		    <artifactId>aopalliance</artifactId>
		    <version>1.0</version>
		</dependency>
			<dependency>  
		    <groupId>org.aspectj</groupId>  
		    <artifactId>aspectjweaver</artifactId>  
		    <version>1.6.12</version>  
		</dependency>  
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-aop -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-aop</artifactId>
		    <version>4.0.0.RELEASE</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-aspects -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-aspects</artifactId>
		    <version>4.0.0.RELEASE</version>
		</dependency>
		
2). 在配置文件中加入 aop 的命名空间

3). 基于注解的方式

①. 在配置文件中加入如下的配置:

<aop:aspectj-autoproxy></aop:aspectj-autoproxy>

②. 把横切关注点的代码抽象到切面的类中.
i.  切面首先是一个 IOC 中的 bean, 即加入 @Component 注解
ii. 切面还需要加入 @Aspect 注解

③. 在类中声明各种通知:

i.  声明一个方法
ii. 在方法加入 @Before 注解

④. 可以在通知方法中声明一个类型为 JoinPoint 的参数. 然后就能访问链接细节. 如方法名称和参数值


@Aspect
@Component
public class LoggingAspect {
	
	//声明该方法是一个前置通知: 在目标方法开始之前执行
	//@Before("execution(public int com.lmg.Spring.aop.ArithmeticCalulaterImpl.add(int,int))")
	//execution(* com.lmg.Spring.aop.ArithmeticCalulaterImpl.*.*(int,int))
	//匹配 所有权限 所有返回值在 com.lmg.Spring.aop.ArithmeticCalulaterImpl 包下所有类 所有参数为(int,int)方法
	@Before("execution(* com.lmg.Spring.aop.ArithmeticCalulaterImpl.*.*(int,int))")
	public void beforeMethod(JoinPoint joinpoint){
		//通过JoinPoint获取方法的细节
		String methodName = joinpoint.getSignature().getName();
		List<Object> asList = Arrays.asList(joinpoint.getArgs());
		System.out.println("The method begin with " + methodName +","+asList);
	}
}
